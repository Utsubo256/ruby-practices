#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'etc'

ORDERED_OUTPUT_FIELDS = %i[nline nword byte_size].freeze

def main
  options = parse_options
  file_names = ARGV
  if file_names.any?
    wc_details = file_names.map { |file_name| extract_wc_detail(File.read(file_name), file_name) }
    total_wc_detail = calculate_total_wc_detail(wc_details)
    wc_details << total_wc_detail if wc_details.size >= 2
    max_digit = total_wc_detail[:byte_size].to_s.size
  else
    wc_details = [extract_wc_detail($stdin.read)]
    max_digit = 7
  end
  formatted_wc_details = format_wc_details(wc_details, max_digit, options)
  puts formatted_wc_details
end

def parse_options
  opt = OptionParser.new
  options = []
  opt.on('-l') { options << :nline }
  opt.on('-w') { options << :nword }
  opt.on('-c') { options << :byte_size }
  opt.parse!(ARGV)
  options.empty? ? ORDERED_OUTPUT_FIELDS : options.sort_by { |option| ORDERED_OUTPUT_FIELDS.index(option) }
end

def extract_wc_detail(content, file_name = '')
  nline = content.count("\n")
  nword = content.gsub(/\t|\n/, ' ').strip.squeeze(' ').count(' ') + 1
  byte_size = content.bytesize
  { nline:, nword:, byte_size:, file_name: }
end

def calculate_total_wc_detail(wc_details)
  nline = wc_details.sum { |detail| detail[:nline] }
  nword = wc_details.sum { |detail| detail[:nword] }
  byte_size = wc_details.sum { |detail| detail[:byte_size] }
  { nline:, nword:, byte_size:, file_name: 'total' }
end

def format_wc_details(wc_details, max_digit, options)
  needs_padding = wc_details.size >= 2 || options.size >= 2
  wc_details.map do |wc_elements|
    formatted_wc_elements = wc_elements.slice(*options).values.map do |wc_element|
      needs_padding ? wc_element.to_s.rjust(max_digit) : wc_element.to_s
    end
    [*formatted_wc_elements, wc_elements[:file_name]].join(' ')
  end
end

main
