#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'etc'

def main
  options = find_options
  output_fields = find_output_fields(options)
  file_names = ARGV
  if file_names.any?
    file_details = find_file_details(file_names)
    max_digit = calc_max_digit(file_details)
    display_wc(file_details, output_fields, max_digit)
    display_total_wc(file_details, output_fields, max_digit) if file_details.size >= 2
  else
    buffer = $stdin.read
    display_wc_for_stdin(buffer, output_fields, max_digit)
  end
end

def find_options
  opt = OptionParser.new
  options = {}
  opt.on('-l') { |v| options[:l] = v }
  opt.on('-w') { |v| options[:w] = v }
  opt.on('-c') { |v| options[:c] = v }
  opt.parse!(ARGV)
  options
end

def find_output_fields(options)
  fields = []
  fields << :nline if options[:l] || options.empty?
  fields << :nword if options[:w] || options.empty?
  fields << :byte_size if options[:c] || options.empty?
  fields
end

def find_file_details(file_names)
  file_names.map do |arg|
    file = File.new(arg)
    content = file.read
    nline = content.count("\n")
    nword = content.gsub(/\t|\n/, ' ').strip.squeeze(' ').count(' ') + 1
    byte_size = file.size
    { nline:, nword:, byte_size:, name: arg }
  end
end

def calc_max_digit(file_details)
  file_details.sum { |file_detail| file_detail[:byte_size] }.to_s.size
end

def display_wc(file_details, output_fields, max_digit)
  file_details.each do |file_detail|
    details = output_fields.map { |type| file_detail[type].to_s.rjust(max_digit, ' ') }
    details = details.map(&:strip) if file_details.size == 1 && details.size == 1
    puts details.push(file_detail[:name]).join(' ')
  end
end

def display_total_wc(file_details, output_fields, max_digit)
  details = output_fields.map do |type|
    file_details.sum { |file| file[type] }.to_s.rjust(max_digit, ' ')
  end
  puts details.push('total').join(' ')
end

def display_wc_for_stdin(buffer, output_fields)
  details = {
    nline: buffer.count("\n"),
    nword: buffer.gsub(/\t|\n/, ' ').strip.squeeze(' ').count(' ') + 1,
    byte_size: buffer.bytesize
  }
  target_details = output_fields.map { |type| details[type].to_s.rjust(7, ' ') }
  target_details = target_details.map(&:strip) if target_details.size == 1
  puts target_details.join(' ')
end

main
