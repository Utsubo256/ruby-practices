#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'etc'

def main
  params = options
  args = ARGV
  if args.any?
    file_details = file_details(args)
    display_wc(file_details, params)
    display_total_wc(file_details, params) if file_details.size >= 2
  else
    buffer = $stdin.read
    display_wc_for_stdin(buffer, params)
  end
end

def options
  opt = OptionParser.new
  params = {}
  opt.on('-l') { |v| params[:l] = v }
  opt.on('-w') { |v| params[:w] = v }
  opt.on('-c') { |v| params[:c] = v }
  opt.parse!(ARGV)
  params
end

def file_details(args)
  args.map do |arg|
    file = File.new(arg)
    content = file.read
    nline = content.count("\n")
    nword = content.gsub(/\t|\n/, ' ').strip.squeeze(" ").count(' ') + 1
    byte_size = file.size
    { nline:, nword:, byte_size:, name: arg }
  end
end

def display_wc(file_details, params)
  max_digit = file_details.sum { |file_detail| file_detail[:byte_size] }.to_s.size
  file_details.each do |file_detail|
    target_details = []
    target_details << file_detail[:nline].to_s.rjust(max_digit, ' ') if params[:l] || params.empty?
    target_details << file_detail[:nword].to_s.rjust(max_digit, ' ') if params[:w] || params.empty?
    target_details << file_detail[:byte_size].to_s.rjust(max_digit, ' ') if params[:c] || params.empty?
    target_details << file_detail[:name]
    puts target_details.join(' ')
  end
end

def display_total_wc(file_details, params)
  target_details = []
  max_digit = file_details.sum { |file_detail| file_detail[:byte_size] }.to_s.size
  target_details << file_details.sum { |file| file[:nline] }.to_s.rjust(max_digit, ' ') if params[:l] || params.empty?
  target_details << file_details.sum { |file| file[:nword] }.to_s.rjust(max_digit, ' ') if params[:w] || params.empty?
  target_details << file_details.sum { |file| file[:byte_size] }.to_s.rjust(max_digit, ' ') if params[:c] || params.empty?
  target_details << "total"
  puts target_details.join(' ')
end

def display_wc_for_stdin(buffer, params)
  target_details = []
  target_details << buffer.count("\n") if params[:l] || params.empty?
  target_details << buffer.gsub(/\t|\n/, ' ').strip.squeeze(' ').count(' ') + 1 if params[:w] || params.empty?
  target_details << buffer.bytesize if params[:c] || params.empty?
  formatted_details = target_details.map { |target_detail| target_detail.to_s.rjust(7, ' ') }
  formatted_details = formatted_details.map(&:strip) if formatted_details.size == 1
  puts formatted_details.join(' ')
end

main
