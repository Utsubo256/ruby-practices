#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'etc'

OUTPUT_FIELDS = {
  l: :nline,
  w: :nword,
  c: :byte_size
}.freeze

def main
  options = parse_options
  output_fields = lookup_output_fields(options)
  file_names = ARGV
  if file_names.any?
    file_details = file_names.map { |file_name| read_file_detail(File.read(file_name), file_name) }
    max_digit = file_details.sum { |file_detail| file_detail[:byte_size] }.to_s.size
    formatted_details = format_details(file_details, output_fields, max_digit)
    formatted_details.each { |file_detail| puts file_detail.join(' ') }
    display_total_wc(file_details, output_fields, max_digit) if formatted_details.size >= 2
  else
    display_wc_for_stdin($stdin.read, output_fields)
  end
end

def parse_options
  opt = OptionParser.new
  options = {}
  opt.on('-l') { |v| options[:l] = v }
  opt.on('-w') { |v| options[:w] = v }
  opt.on('-c') { |v| options[:c] = v }
  opt.parse!(ARGV)
  options
end

def lookup_output_fields(options)
  fields = []
  fields << OUTPUT_FIELDS[:l] if options[:l] || options.empty?
  fields << OUTPUT_FIELDS[:w] if options[:w] || options.empty?
  fields << OUTPUT_FIELDS[:c] if options[:c] || options.empty?
  fields
end

def read_file_detail(content, file_name = '')
  wc_info = extract_wc_info(content)
  { **wc_info, file_name: }
end

def extract_wc_info(content)
  nline = content.count("\n")
  nword = content.gsub(/\t|\n/, ' ').strip.squeeze(' ').count(' ') + 1
  byte_size = content.bytesize
  { nline:, nword:, byte_size: }
end

def format_details(file_details, output_fields, max_digit)
  file_details.map do |file_detail|
    formatted_detail = output_fields.map { |type| file_detail[type].to_s.rjust(max_digit, ' ') }
    formatted_detail = formatted_detail.map(&:strip) if output_fields.size == 1 && file_details.size == 1
    [*formatted_detail, file_detail[:file_name]]
  end
end

def display_total_wc(file_details, output_fields, max_digit)
  details = output_fields.map do |type|
    file_details.sum { |file| file[type] }.to_s.rjust(max_digit, ' ')
  end
  puts [*details, 'total'].join(' ')
end

def display_wc_for_stdin(content, output_fields)
  wc_info = extract_wc_info(content)
  target_details = output_fields.map { |type| wc_info[type].to_s.rjust(7, ' ') }
  target_details = target_details.map(&:strip) if target_details.size == 1
  puts target_details.join(' ')
end

main
